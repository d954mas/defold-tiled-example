local DIRTYLARRY = require "gooey-dirtylarry.dirtylarry"
local PARSER = require "assets.bundle.common.levels.parser.parser"
local TILESETS = require "game.tilesets"

local PROXY_STATUS = {
    LOADED = "LOADED",
    UNLOADED = "UNLOADED"
}

local LOAD_TYPE = {
    COLLECTION = "COLLECTION",
    TILED = "TILED",
    TILED_RUNTIME = "TILED_RUNTIME"
}

local function find_collection(self, sender)
    local sender_url = msg.url(sender)
    for _, collection in pairs(self.collections) do
        if (sender_url.path == collection.proxy.path and sender_url.fragment == collection.proxy.fragment) then
            return collection
        end
    end
end

local function load_game_level(self, type)
    assert(not self.load_co, "already have load")
    assert(LOAD_TYPE[type], "unknown load type:" .. tostring(type))
    self.load_co = coroutine.create(function()
        local need_unload = false
        --UNLOAD ALL
        for _, collection in pairs(self.collections) do
            if (collection.status == PROXY_STATUS.LOADED) then
                msg.post(collection.proxy, "unload")
                need_unload = true
            end
        end
        --WAIT WHILE ALL UNLOADED
        while (need_unload) do
            coroutine.yield()
            need_unload = false
            for _, collection in pairs(self.collections) do
                if (collection.status == PROXY_STATUS.LOADED) then
                    need_unload = true
                    break
                end
            end
        end

        --START LOAD
        if (type == LOAD_TYPE.COLLECTION) then
            msg.post(self.collections.game_tilemap.proxy, "async_load")
            while (self.collections.game_tilemap.status == PROXY_STATUS.UNLOADED) do coroutine.yield() end
        else
            msg.post(self.collections.game_tiled.proxy, "async_load")
            while (self.collections.game_tiled.status == PROXY_STATUS.UNLOADED) do coroutine.yield() end
            if (type == LOAD_TYPE.TILED) then
                msg.post("game_tiled:/level_loader#level_loader", "load_level", { type = "editor" })
            elseif (type == LOAD_TYPE.TILED_RUNTIME) then
                msg.post("game_tiled:/level_loader#level_loader", "load_level", { type = "runtime" })
            end
        end
    end)

end

function init(self)
    self.load_co = nil
    self.collections = {
        game_tiled = {
            proxy = msg.url("game:/proxy#game_tiled"),
            status = PROXY_STATUS.UNLOADED
        },
        game_tilemap = {
            proxy = msg.url("game:/proxy#game_tilemap"),
            status = PROXY_STATUS.UNLOADED
        }
    }
    msg.post(".", "acquire_input_focus")
    load_game_level(self, LOAD_TYPE.COLLECTION)

    local can_load_runtime_level = false
    local sys_info = sys.get_sys_info()
    local platform = sys_info.system_name
    local is_desktop = platform == "Windows" or platform == "Linux" or platform == "Darwin"


    if (lfs and is_desktop) then
        PARSER.set_tilesets(TILESETS)
        local level_path = "levels\\runtime\\lua"
        for file in lfs.dir(lfs.currentdir() .. "\\" .. level_path) do
            if file ~= "." and file ~= ".." then
                local name = (lfs.currentdir() .. "\\" .. level_path .. "\\" .. file):match("^.+\\(.+)....")
                if (name == "runtime_1") then can_load_runtime_level = true end
            end
        end
    end
    gui.set_enabled(gui.get_node("btn_load_json_runtime/bg"), can_load_runtime_level)
end

function final(self)
    msg.post(".", "release_input_focus")
end

function update(self, dt)
    if (self.load_co) then
        local ok, res = coroutine.resume(self.load_co, dt)
        if not ok then
            print("COROUTINE ERROR")
            print(res .. debug.traceback(self.load_co, "", 1), "Error in coroutine", 1)
            self.load_co = nil
        else
            if (coroutine.status(self.load_co) == "dead") then
                self.load_co = nil
            end
        end
    end
end

function on_message(self, message_id, message, sender)
    if (message_id == hash("proxy_loaded")) then
        local collection = find_collection(self, sender)
        collection.status = PROXY_STATUS.LOADED
        msg.post(collection.proxy, "acquire_input_focus")
        msg.post(collection.proxy, "init")
        msg.post(collection.proxy, "enable")
    elseif (message_id == hash("proxy_unloaded")) then
        local collection = find_collection(self, sender)
        collection.status = PROXY_STATUS.UNLOADED
        msg.post(collection.proxy, "release_input_focus")
    end
end

function on_input(self, action_id, action)
    DIRTYLARRY.button("btn_load_collection", action_id, action, function(button)
        load_game_level(self, LOAD_TYPE.COLLECTION)
    end)
    DIRTYLARRY.button("btn_load_json", action_id, action, function(button)
        load_game_level(self, LOAD_TYPE.TILED)
    end)
    DIRTYLARRY.button("btn_load_json_runtime", action_id, action, function(button)
        load_game_level(self, LOAD_TYPE.TILED_RUNTIME)
    end)
end
